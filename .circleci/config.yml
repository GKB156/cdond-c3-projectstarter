version: 2.1

orbs:
  slack: circleci/slack@4.9.3

commands:
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      when:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      when:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable

            SUCCESS=$(curl --insecure  https://kvdb.io/EWnYLFh8jhHMe7vUSGxnWc/migration_<< parameters.workflow_id >>)

            # SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - notify_slack_error
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - notify_slack_error
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - notify_slack_error

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - notify_slack_error

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - notify_slack_error

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - notify_slack_error

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" >> .circleci/ansible/inventory.txt
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt)
            echo "http://${BACKEND_AWS_PUBLIC_IP}:3030"
            echo "${BACKEND_AWS_PUBLIC_IP}" >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c5:2f:78:d8:55:ee:f7:50:a2:ec:54:aa:fb:5e:ce:cc"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # apk add ansible
            # apk add curl
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            echo ENVIROMENT=$ENVIROMENT > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"         
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  run-migrations:
    docker:
      - image: cimg/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations:revert
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/EWnYLFh8jhHMe7vUSGxnWc/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 1
            else
                curl https://kvdb.io/EWnYLFh8jhHMe7vUSGxnWc/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 0
            fi

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install tar utility
          command: |
            # yum install -y tar gzip
            apk add --no-cache tar
      - run:
          name: Install awscli
          command: |
            pwd
            apk add curl
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Install npm and node
          command: |
            apk add nodejs nodejs-npm
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            export API_URL="http://${BACKEND_IP}:3030"
            cat frontend/.env
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["c5:2f:78:d8:55:ee:f7:50:a2:ec:54:aa:fb:5e:ce:cc"]
      - attach_workspace:
          at: ~/
      - run:
          name: Set env
          no_output_timeout: 60m
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      # - run:
      #     name: Set env
      #     command: |
      #       echo ENVIROMENT= production > "backend/.env"
      #       echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
      #       echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
      #       echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
      #       echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
      #       echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
      #       echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
      #       echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
      #       echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
      #       echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Install nodejs and npm
          command: |
            apk add --update nodejs npm
      - run:
          name: Install tar
          command: |
            apk add --update tar gzip
      - run:
          name: Install awscli
          command: |
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..

            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .

            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            export ANSIBLE_HOST_KEY_CHECKING=False
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c5:2f:78:d8:55:ee:f7:50:a2:ec:54:aa:fb:5e:ce:cc"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl nodejs npm
            pip3 install awscli
            apk update
            apk upgrade
            apk add curl
            apk add --no-cache --upgrade bash
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "API_URL = ${API_URL}"
            if curl -s "${API_URL}" | grep "ok"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      #     when: on_fail
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      #     when: on_fail

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl nodejs npm
            pip install awscli
            apk update
            apk upgrade
            apk add curl
            apk add --no-cache --upgrade bash
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
